/**
 * Copyright 2012 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jbpm.datamodeler.codegen;

import org.jbpm.datamodeler.annotations.TestTypesAnnotationDefinition;
import org.jbpm.datamodeler.core.Annotation;
import org.jbpm.datamodeler.core.DataModel;
import org.jbpm.datamodeler.core.DataObject;
import org.jbpm.datamodeler.core.ObjectProperty;
import org.jbpm.datamodeler.core.impl.AnnotationImpl;
import org.jbpm.datamodeler.core.impl.ModelFactoryImpl;
import org.jbpm.datamodeler.driver.impl.annotations.DescriptionAnnotationDefinition;
import org.jbpm.datamodeler.driver.impl.annotations.EqualsAnnotationDefinition;
import org.jbpm.datamodeler.driver.impl.annotations.LabelAnnotationDefinition;

import java.math.BigDecimal;
import java.util.Date;

public class TestSimplePOJOGeneration {
    private DataModel dataModel;

    public DataModel getInvoiceModel() {
        if (dataModel == null) {
            String packageName = "org.jbpm.datamodeler.autogenerated";
            dataModel = ModelFactoryImpl.getInstance().newModel("Invoice model");

            DataObject invoiceModel = dataModel.addDataObject(packageName, "Invoice");
            //invoiceModel.setSuperClassName("com.redhat.BusinessObject");

            //add Label annotation to the Invoice
            Annotation label = new AnnotationImpl(LabelAnnotationDefinition.getInstance());
            label.setValue("value", "Object label for Invoice");
            label.setValue("otro", "kaka");
            invoiceModel.addAnnotation(label);

            //add Description annotation to the Invoice
            Annotation description = new AnnotationImpl(DescriptionAnnotationDefinition.getInstance());
            description.setValue("value", "Object description for Invoice");
            description.setValue("otro", "kaka");
            invoiceModel.addAnnotation(description);

            //add TestTypesAnnotation to the invoice
            /*
            stringValue = "string value element",
            byteValue = 1,
            shortValue = 2,
            intValue = 3,
            longValue = 4,
            floatValue = 5,
            doubleValue = 6,
            charValue = '\u0000',
            booleanValue = true,
            enumValue = ElementType.TYPE
             */
            Annotation testTypesAnnotation = new AnnotationImpl(TestTypesAnnotationDefinition.getInstance());
            testTypesAnnotation.setValue("stringValue", "the string value");
            testTypesAnnotation.setValue("byteValue", new Byte("9"));
            testTypesAnnotation.setValue("shortValue", new Short((short)10));
            testTypesAnnotation.setValue("intValue", new Integer("11"));
            testTypesAnnotation.setValue("longValue", new Long(12));
            testTypesAnnotation.setValue("floatValue", new Float("13.15"));
            testTypesAnnotation.setValue("doubleValue", new Double("14.15"));
            testTypesAnnotation.setValue("charValue", new Character("W".charAt(0)));
            testTypesAnnotation.setValue("enumValue", "TYPE");
            invoiceModel.addAnnotation(testTypesAnnotation);



            invoiceModel.addProperty("invoiceNumber", Long.class.getName());
            invoiceModel.addProperty("date", Date.class.getName());
            invoiceModel.addProperty("client", String.class.getName());
            ObjectProperty totalAmount = invoiceModel.addProperty("totalAmount", BigDecimal.class.getName());

            Annotation fieldLabel = new AnnotationImpl(new LabelAnnotationDefinition().getInstance());
            fieldLabel.setValue("value", "Field label for field totalAmount");
            fieldLabel.setValue("otro", "kaka");
            totalAmount.addAnnotation(fieldLabel);

            Annotation fieldDescription = new AnnotationImpl(new DescriptionAnnotationDefinition().getInstance());
            fieldDescription.setValue("value", "Field description for field totalAmount");
            fieldDescription.setValue("otro", "kaka");
            totalAmount.addAnnotation(fieldDescription);
            
            totalAmount.addAnnotation(new AnnotationImpl(EqualsAnnotationDefinition.getInstance()));
            totalAmount.addAnnotation(testTypesAnnotation);

            DataObject invoiceLineModel = dataModel.addDataObject(packageName, "InvoiceLine");

            invoiceModel.addProperty("lines", invoiceLineModel.getClassName(), true);

            invoiceLineModel.addProperty("lineNumber", Integer.class.getName());
            invoiceLineModel.addProperty("article", String.class.getName());
            invoiceLineModel.addProperty("unitPrice", BigDecimal.class.getName());
            invoiceLineModel.addProperty("units", Integer.class.getName());
            invoiceLineModel.addProperty("lineTotal", BigDecimal.class.getName());

        }

        return dataModel;
    }

    @org.junit.Test
    public void testName() throws Exception {
        GenerationContext generationContext = new GenerationContext(getInvoiceModel());
        generationContext.setOutputPath("/tmp");

        //generationContext.setOutputPath("/home/wmedvede/development/projects/jbpm-data-modeler/jbpm-data-modeler-core/src/test/java");

        GenerationEngine.getInstance().generate(generationContext);
    }
}
