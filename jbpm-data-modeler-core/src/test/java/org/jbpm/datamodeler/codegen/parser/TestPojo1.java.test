package org.jbpm.datamodeler.codegen.parser;

import org.jbpm.datamodeler.annotations.*;

import java.io.Serializable;
import java.util.Date;


/**
 * Test pojo 1 class.
 *
 * This class was intended for testing purposes.
 * Please don't modify this class unless you modify also the TestPojo1 class.
 * given test result can change.
 */

@TestMarkerAnnotation
@TestValueAnnotation("value.content")
@TestValuePairAnnotation( param1   = "param1.content", param2 = 2, param3 = true, param4 = {"one", "two", "three"} )
public class TestPojo1 extends org.jbpm.datamodeler.TestBase implements Serializable, java.lang.Redhatizable {


    @Equals
    int intA;


    public static final String TEST_POJO = "TEST_POJO";

    @Required
    protected Integer intB;

    @IsMethod(owner = "juancito", methodName = "anotado")
    private static final void notParsedMethod() {
        //methods will be ignored by this parser version.
    }


    @BasicAnnotation
    public TestPojo1(int intA) {
        //constructors will be ingnored by this parser version.
        this.intA = intA;
    }

    @TestBasicAnnotation
    @Equals
    public static String strB;


    private Date dateSimple;

    @Override
    void notParsedMethod2() {
        //methods will be ignored by this parser version.
    }

    @TestSizeAnnotation(size = 45)
    int count = 0;

    @Equals
    private String a, b, c;

    @Equals
    @BasicValueAnnotation("value.content")
    private String e, f, g = "jaime";

    void iterationMethod() {
        //methods will be ingnored but shouldn't generate errors.
        final int count = 0;
        for (int i = 0; i < 1000; i++) {
            System.out.println("I'm iterating i = " + i);
            count++;
        }
        if (count > 1001) {
            System.out.println("not posible");
        }
    }

    static final String myClassName = "my name";

}